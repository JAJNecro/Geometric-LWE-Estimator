

# This file was *autogenerated* from the file ring_kannan.sage
from sage.all_cmdline import *   # import sage library

_sage_const_5 = Integer(5); _sage_const_64 = Integer(64); _sage_const_3329 = Integer(3329); _sage_const_20 = Integer(20); _sage_const_0 = Integer(0); _sage_const_50 = Integer(50); _sage_const_2 = Integer(2)#LWE embedded into EBDD instance  (using Kannan's embedding) (no hints)
# using ringlwe
import numpy as np
import pandas as pd
import time
load('../../framework/LWE.sage')
load('../../framework/utils.sage')

times = []
predicted_betas = []
calculated_betas = []
solutions = []
norms = []

num_experiments = _sage_const_5 
for x in range(num_experiments):
    start = time.time()
    print("========================================== Experiment: " + str(x) + "=========================================")
    #LWE Specs
    n = _sage_const_64 
    m = n
    q = _sage_const_3329 
    sigma = sqrt(_sage_const_20 )
    sigma_c = []
    mu = concatenate([_sage_const_0 ] * (m+n), [])
    d = m + n
    D_s = build_Gaussian_law(sigma, _sage_const_50 )
    D_e = D_s

    #embedding into EBDD
    lwe_instance = LWE(m, q, n, D_e, D_s, is_ring = True)
    ebdd_with_lwe = lwe_instance.embed_into_EBDD()

    #getting u, norm, and predicted betas
    u = concatenate(lwe_instance.s, lwe_instance.e_vec)
    norm = scal(matrix(u) * matrix(u.T))/((n+m)*sigma**_sage_const_2 ) 
    norms.append(float(norm)) 
    ebdd_with_lwe.estimate_attack()
    predicted_betas.append(ebdd_with_lwe.beta)
    solutions.append(ebdd_with_lwe.u)

    beta, delta = ebdd_with_lwe.attack() 
    calculated_betas.append(beta)
    end = time.time()
    times.append(end-start)

#exporting to csv
d = {"Predicted Beta": predicted_betas, "Calculated Beta": calculated_betas, "Norms": norms, "Times": times}
df = pd.DataFrame(data=d)
df.to_csv('ringkannan.csv', index = True)

